---
AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS resources for serverless status pages"
Parameters:
  UserName:
    Description: Your user name (email addresses are not allowed)
    Type: String
    Default: admin
    MinLength: 1
    AllowedPattern: "^[a-zA-Z0-9_-]*$"
  UserEmail:
    Description: Your email address. The initial login information will be sent to the address
    Type: String
    # The pattern is included in the error message, so the simpler pattern is preferable. Based on http://stackoverflow.com/a/8204716
    AllowedPattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
  CloudFrontAccessIdentity:
    Description: >
      This is an AWS identity that allows CloudFront to access other restricted AWS resources.
      It cannot be created by CloudFormation. Visit the following page and provide a name.
      https://console.aws.amazon.com/cloudfront/home?#oai
    Type: "String"
  StatusPageSSLCertificate:
    Description: Optional. See lambstatus.github.io/set-up-custom-domain for usage
    ConstraintDescription: Certificate must be based in us-east-1 region
    Type: String
    AllowedPattern: "^(arn:aws:acm:us-east-1:.+|)"
  StatusPageURL:
    Description: Optional. See lambstatus.github.io/set-up-custom-domain for usage
    Type: CommaDelimitedList
  AdminPageSSLCertificate:
    Description: Optional. See lambstatus.github.io/set-up-custom-domain for usage
    ConstraintDescription: Certificate must be based in us-east-1 region
    Type: String
    AllowedPattern: "^(arn:aws:acm:us-east-1:.+|)"
  AdminPageURL:
    Description: Optional. See lambstatus.github.io/set-up-custom-domain for usage
    Type: CommaDelimitedList
Mappings:
  Constants:
    LambStatus:
      Version: 0.6.2
Conditions:
  UseDefaultStatusPageSSLCertificate:
    !Equals [ !Ref StatusPageSSLCertificate, "" ]
  UseDefaultStatusPageURL:
    !Equals [ !Join [ ",", !Ref StatusPageURL ], "" ]
  UseDefaultAdminPageSSLCertificate:
    !Equals [ !Ref AdminPageSSLCertificate, "" ]
  UseDefaultAdminPageURL:
    !Equals [ !Join [ ",", !Ref AdminPageURL ], "" ]
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Statement:
              - Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                Effect: Allow
                Resource: arn:aws:logs:*:*:*
        - PolicyName: DynamoDB
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub |-
                  arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ServiceComponentTable}
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub |-
                  arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${IncidentTable}
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub |-
                  arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${IncidentUpdateTable}
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub |-
                  arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MaintenanceTable}
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub |-
                  arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MaintenanceUpdateTable}
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub |-
                  arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MetricsTable}
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub |-
                  arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SettingsTable}
        - PolicyName: CloudFormation
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: cloudformation:DescribeStacks
                Resource: !Sub |-
                  arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*
        - PolicyName: S3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub |-
                    arn:aws:s3:::${StatusPageS3}
                  - !Sub |-
                    arn:aws:s3:::${AdminPageS3}
                  - arn:aws:s3:::lambstatus
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Sub |-
                    arn:aws:s3:::${StatusPageS3}/*
                  - !Sub |-
                    arn:aws:s3:::${AdminPageS3}/*
                  - arn:aws:s3:::lambstatus/*
        - PolicyName: CloudWatch
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:GetMetricData
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                Resource: "*"
        - PolicyName: Cognito
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:*
                  - iam:PassRole
                Resource: '*'
        - PolicyName: APIGateway
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - apigateway:POST
                Resource: !Sub |-
                  arn:aws:apigateway:${AWS::Region}::/restapis/${RestApi}/deployments
              - Effect: Allow
                Action:
                  - apigateway:*
                Resource: !Sub |-
                  arn:aws:apigateway:${AWS::Region}::/apikeys
              - Effect: Allow
                Action:
                  - apigateway:*
                Resource: !Sub |-
                  arn:aws:apigateway:${AWS::Region}::/apikeys/*
              - Effect: Allow
                Action:
                  - apigateway:*
                Resource: !Sub |-
                  arn:aws:apigateway:${AWS::Region}::/usageplans/*/keys
        - PolicyName: SNS
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: sns:publish
                Resource:
                  Ref: IncidentNotificationTopic
              - Effect: Allow
                Action:
                  - sns:CreateTopic
                  - sns:Subscribe
                Resource: !Sub |-
                  arn:aws:sns:*:${AWS::AccountId}:*
              - Effect: Allow
                Action: sns:ListTopics
                Resource: "*"
        - PolicyName: SES
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ses:SendEmail
                Resource: !Sub |-
                  arn:aws:ses:*:${AWS::AccountId}:*/*
        - PolicyName: Lambda
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: lambda:AddPermission
                Resource: !Sub |-
                  arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-HandleBouncesAndComplaints
  GetComponentsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/GetComponents.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Get a list of components"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-GetComponents
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  GetComponentsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "GetComponentsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
  PostComponentsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/PostComponents.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Create a new component"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PostComponents
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  PostComponentsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PostComponentsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
  PatchComponentsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/PatchComponents.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Update an existing component"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PatchComponents
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  PatchComponentsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PatchComponentsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
  DeleteComponentsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/DeleteComponents.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Delete an existing component"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-DeleteComponents
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  DeleteComponentsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "DeleteComponentsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
  GetIncidentsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/GetIncidents.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Get a list of incidents"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-GetIncidents
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  GetIncidentsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "GetIncidentsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
  PostIncidentsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/PostIncidents.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Create a new incident"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PostIncidents
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  PostIncidentsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PostIncidentsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
  GetIncidentLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/GetIncident.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Get an incident"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-GetIncident
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  GetIncidentLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "GetIncidentLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
  PatchIncidentsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/PatchIncidents.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Update an existing incident"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PatchIncidents
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  PatchIncidentsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PatchIncidentsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
  DeleteIncidentsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/DeleteIncidents.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Delete an incident"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-DeleteIncidents
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  DeleteIncidentsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "DeleteIncidentsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
  PatchIncidentUpdatesLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/PatchIncidentUpdates.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Patch incident update"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PatchIncidentUpdates
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  PatchIncidentUpdatesLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PatchIncidentUpdatesLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
  GetMaintenancesLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/GetMaintenances.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Get a list of maintenances"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-GetMaintenances
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  GetMaintenancesLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "GetMaintenancesLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
  PostMaintenancesLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/PostMaintenances.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Create a new maintenance"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PostMaintenances
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  PostMaintenancesLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PostMaintenancesLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
  PatchMaintenancesLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/PatchMaintenances.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Update an existing maintenance"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PatchMaintenances
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  PatchMaintenancesLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PatchMaintenancesLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
  DeleteMaintenancesLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/DeleteMaintenances.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Delete an maintenance"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-DeleteMaintenances
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  DeleteMaintenancesLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "DeleteMaintenancesLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
  GetMaintenanceLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/GetMaintenance.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Get a maintenance"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-GetMaintenance
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  GetMaintenanceLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "GetMaintenanceLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
  PatchMaintenanceUpdatesLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/PatchMaintenanceUpdates.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Patch maintenance update"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PatchMaintenanceUpdates
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  PatchMaintenanceUpdatesLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PatchMaintenanceUpdatesLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
  GetSettingsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/GetSettings.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Get settings"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-GetSettings
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  GetSettingsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "GetSettingsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/api/settings
  GetPublicSettingsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/GetPublicSettings.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Get settings"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-GetPublicSettings
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  GetPublicSettingsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "GetPublicSettingsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/api/public-settings
  PatchSettingsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/PatchSettings.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Patch settings"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PatchSettings
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: "nodejs8.10"
      Timeout: 30
  PatchSettingsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PatchSettingsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/PATCH/api/settings
  PostLogosLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/PostLogos.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Post Logo"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PostLogos
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: "nodejs8.10"
      Timeout: 30
  PostLogosLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PostLogosLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/api/settings/logos
  DeleteLogosLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/DeleteLogos.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Delete Logo"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-DeleteLogos
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: "nodejs8.10"
      Timeout: 30
  DeleteLogosLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "DeleteLogosLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/DELETE/api/settings/logos/{logoid}
  PostApiKeysLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/PostApiKeys.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Create a new api key"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PostApiKeys
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  PostApiKeysLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PostApiKeysLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/api/settings/apikeys
  DeleteApiKeysLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/DeleteApiKeys.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Delete an existing component"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-DeleteApiKeys
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  DeleteApiKeysLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "DeleteApiKeysLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/DELETE/api/settings/apikeys/{apikeyid}
  GetExternalMetricsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/GetExternalMetrics.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Get external metrics"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-GetExternalMetrics
      Handler: "index.handle"
      MemorySize: 512
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 60
  GetExternalMetricsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "GetExternalMetricsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/api/external-metrics
  GetPublicMetricsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/GetPublicMetrics.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Get public metrics"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-GetPublicMetrics
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  GetPublicMetricsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "GetPublicMetricsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/api/public-metrics
  GetMetricsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/GetMetrics.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Get metrics"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-GetMetrics
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  GetMetricsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "GetMetricsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/api/metrics
  PostMetricsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/PostMetrics.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Post a new metric"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PostMetrics
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  PostMetricsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PostMetricsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/api/metrics
  PatchMetricsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/PatchMetrics.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Update the existing metric"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PatchMetrics
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  PatchMetricsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PatchMetricsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/PATCH/api/metrics/{metricid}
  DeleteMetricsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/DeleteMetrics.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Update the existing metric"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-DeleteMetrics
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  DeleteMetricsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "DeleteMetricsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/DELETE/api/metrics/{metricid}
  PostMetricsDataLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/PostMetricsData.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Post metrics data"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PostMetricsData
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 60
  PostMetricsDataLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PostMetricsDataLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/api/v0/metrics/data
  CollectMetricsDataLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/CollectMetricsData.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Collect metrics data"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-CollectMetricsData
      Handler: "index.handle"
      MemorySize: 512
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 60
  CollectMetricsDataLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "CollectMetricsDataLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/*
  CollectMetricsDataEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: The periodical event to collect metrics data
      ScheduleExpression: rate(1 minute)
      Targets:
        - Arn:
            Fn::GetAtt:
              - "CollectMetricsDataLambdaFunction"
              - "Arn"
          Id: CollectMetricsDataFunction
          Input: !Sub |-
            {"StatusPageS3BucketName": "${StatusPageS3}"}
  UpdateFeedsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/UpdateFeeds.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Update feeds"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-UpdateFeeds
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  UpdateFeedsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "UpdateFeedsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn:
        Ref: "IncidentNotificationTopic"
  IncidentNotificationTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: !Sub |-
        ${AWS::StackName}-IncidentNotification
  IncidentSubscriptionByUpdateFeeds:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !Sub |-
        ${UpdateFeedsLambdaFunction.Arn}
      Protocol: "lambda"
      TopicArn:
        Ref: "IncidentNotificationTopic"
  SendEmailsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/SendEmails.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Send emails to subscribers"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-SendEmails
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 300
  SendEmailsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "SendEmailsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn:
        Ref: "IncidentNotificationTopic"
  IncidentSubscriptionBySendEmails:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !Sub |-
        ${SendEmailsLambdaFunction.Arn}
      Protocol: "lambda"
      TopicArn:
        Ref: "IncidentNotificationTopic"
  SubscribeLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/Subscribe.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Subscribe updates"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-Subscribe
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  SubscribeLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "SubscribeLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
  ConfirmSubscriptionLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/ConfirmSubscription.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "confirm subscription"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-ConfirmSubscription
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  ConfirmSubscriptionLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "ConfirmSubscriptionLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
  UnsubscribeLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/Unsubscribe.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Unsubscribe updates"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-Unsubscribe
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 30
  UnsubscribeLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "UnsubscribeLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
  HandleBouncesAndComplaintsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/HandleBouncesAndComplaints.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Handle bounces and complaints"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-HandleBouncesAndComplaints
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 300
  ApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId:
        Ref: "RestApi"
      Description: "Production deployment"
      StageName: "prod"
    # The deployment resource must depend on the RestApi's methods.
    # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-deployment.html#aws-resource-apigateway-deployment-examples
    DependsOn:
      - "GetComponentsApiMethod"
      - "PostComponentsApiMethod"
      - "PatchComponentApiMethod"
      - "DeleteComponentApiMethod"
      - "GetIncidentsApiMethod"
      - "PostIncidentsApiMethod"
      - "PatchIncidentApiMethod"
      - "DeleteIncidentApiMethod"
      - "PatchIncidentUpdateApiMethod"
      - "GetMaintenancesApiMethod"
      - "PostMaintenancesApiMethod"
      - "PatchMaintenanceApiMethod"
      - "DeleteMaintenanceApiMethod"
      - "GetMaintenanceApiMethod"
      - "PatchMaintenanceUpdateApiMethod"
      - "GetExternalMetricsApiMethod"
      - "GetPublicMetricsApiMethod"
      - "GetMetricsApiMethod"
      - "PostMetricsApiMethod"
      - "PatchMetricApiMethod"
      - "DeleteMetricApiMethod"
      - "GetPublicSettingsApiMethod"
      - "GetSettingsApiMethod"
      - "PatchSettingsApiMethod"
      - "PostLogosApiMethod"
      - "DeleteLogoApiMethod"
      - "PostApiKeysApiMethod"
      - "DeleteApiKeyApiMethod"
      - "PostMetricsDataApiMethod"
      - "SubscribeApiMethod"
      - "ConfirmSubscriptionApiMethod"
      - "UnsubscribeApiMethod"
  RestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Description: "API for page status"
      Name:
        Ref: "AWS::StackName"
  Authorizer:
    Type: "AWS::ApiGateway::Authorizer"
    Properties:
      IdentitySource: method.request.header.Authorization
      Name: CognitoUserPool
      ProviderARNs:
        - !Sub |-
          arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool.UserPoolID}
      RestApiId:
        Ref: "RestApi"
      Type: COGNITO_USER_POOLS
  RootApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Fn::GetAtt:
          - "RestApi"
          - "RootResourceId"
      PathPart: "api"
  ComponentsApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "RootApiResource"
      PathPart: "components"
  ComponentApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "ComponentsApiResource"
      PathPart: "{componentid}"
  GetComponentsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "ComponentsApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetComponentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  PostComponentsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "ComponentsApiResource"
      HttpMethod: "POST"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PostComponentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  PatchComponentApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "ComponentApiResource"
      HttpMethod: "PATCH"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "body":$input.json('$'),
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PatchComponentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  DeleteComponentApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "ComponentApiResource"
      HttpMethod: "DELETE"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "DeleteComponentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "204"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "204"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  IncidentsApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "RootApiResource"
      PathPart: "incidents"
  GetIncidentsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "IncidentsApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetIncidentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  PostIncidentsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "IncidentsApiResource"
      HttpMethod: "POST"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PostIncidentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  IncidentApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "IncidentsApiResource"
      PathPart: "{incidentid}"
  GetIncidentApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "IncidentApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetIncidentLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  PatchIncidentApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "IncidentApiResource"
      HttpMethod: "PATCH"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "body":$input.json('$'),
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PatchIncidentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  DeleteIncidentApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "IncidentApiResource"
      HttpMethod: "DELETE"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "DeleteIncidentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "204"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "204"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  IncidentUpdatesApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "IncidentApiResource"
      PathPart: "incidentupdates"
  IncidentUpdateApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "IncidentUpdatesApiResource"
      PathPart: "{incidentupdateid}"
  PatchIncidentUpdateApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "IncidentUpdateApiResource"
      HttpMethod: "PATCH"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "body":$input.json('$'),
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PatchIncidentUpdatesLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  MaintenancesApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "RootApiResource"
      PathPart: "maintenances"
  GetMaintenancesApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "MaintenancesApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetMaintenancesLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  PostMaintenancesApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "MaintenancesApiResource"
      HttpMethod: "POST"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PostMaintenancesLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  MaintenanceApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "MaintenancesApiResource"
      PathPart: "{maintenanceid}"
  GetMaintenanceApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "MaintenanceApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetMaintenanceLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  PatchMaintenanceApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "MaintenanceApiResource"
      HttpMethod: "PATCH"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "body":$input.json('$'),
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PatchMaintenancesLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  DeleteMaintenanceApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "MaintenanceApiResource"
      HttpMethod: "DELETE"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "DeleteMaintenancesLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "204"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "204"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  MaintenanceUpdatesApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "MaintenanceApiResource"
      PathPart: "maintenanceupdates"
  MaintenanceUpdateApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "MaintenanceUpdatesApiResource"
      PathPart: "{maintenanceupdateid}"
  PatchMaintenanceUpdateApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "MaintenanceUpdateApiResource"
      HttpMethod: "PATCH"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "body":$input.json('$'),
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PatchMaintenanceUpdatesLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  ExternalMetricsApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "RootApiResource"
      PathPart: "external-metrics"
  GetExternalMetricsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "ExternalMetricsApiResource"
      HttpMethod: "GET"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      RequestParameters:
        method.request.querystring.type: false
        method.request.querystring.cursor: false
        method.request.querystring.filters: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetExternalMetricsLambdaFunction"
                - "Arn"
        RequestTemplates:
          application/json: !Sub |-
            {
              "type":"$input.params('type')",
              "cursor":"$input.params('cursor')",
              "filters":"$util.escapeJavaScript($input.params('filters'))"
            }
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  PublicMetricsApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "RootApiResource"
      PathPart: "public-metrics"
  GetPublicMetricsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "PublicMetricsApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetPublicMetricsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  MetricsApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "RootApiResource"
      PathPart: "metrics"
  MetricApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "MetricsApiResource"
      PathPart: "{metricid}"
  GetMetricsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "MetricsApiResource"
      HttpMethod: "GET"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetMetricsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  PostMetricsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "MetricsApiResource"
      HttpMethod: "POST"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PostMetricsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  PatchMetricApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "MetricApiResource"
      HttpMethod: "PATCH"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "body":$input.json('$'),
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PatchMetricsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  DeleteMetricApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "MetricApiResource"
      HttpMethod: "DELETE"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "DeleteMetricsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "204"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "204"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  PublicSettingsApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "RootApiResource"
      PathPart: "public-settings"
  GetPublicSettingsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "PublicSettingsApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetPublicSettingsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  SettingsApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "RootApiResource"
      PathPart: "settings"
  GetSettingsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "SettingsApiResource"
      HttpMethod: "GET"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetSettingsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  PatchSettingsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "SettingsApiResource"
      HttpMethod: "PATCH"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "body":$input.json('$'),
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PatchSettingsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  LogosApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "SettingsApiResource"
      PathPart: "logos"
  LogoApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "LogosApiResource"
      PathPart: "{logoid}"
  PostLogosApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "LogosApiResource"
      HttpMethod: "POST"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PostLogosLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  DeleteLogoApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "LogoApiResource"
      HttpMethod: "DELETE"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "DeleteLogosLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "204"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "204"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  ApiKeysApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "SettingsApiResource"
      PathPart: "apikeys"
  ApiKeyApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "ApiKeysApiResource"
      PathPart: "{apikeyid}"
  PostApiKeysApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "ApiKeysApiResource"
      HttpMethod: "POST"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PostApiKeysLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  DeleteApiKeyApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "ApiKeyApiResource"
      HttpMethod: "DELETE"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "DeleteApiKeysLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "204"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "204"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  SubscribersApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "RootApiResource"
      PathPart: "subscribers"
  SubscribeApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "SubscribersApiResource"
      PathPart: "subscribe"
  SubscribeApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "SubscribeApiResource"
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "SubscribeLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  ConfirmSubscriptionApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "SubscribersApiResource"
      PathPart: "confirm"
  ConfirmSubscriptionApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "ConfirmSubscriptionApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      RequestParameters:
        method.request.querystring.username: false
        method.request.querystring.code: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "ConfirmSubscriptionLambdaFunction"
                - "Arn"
        RequestTemplates:
          application/json: !Sub |-
            {
              "username":"$input.params('username')",
              "code":"$input.params('code')"
            }
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Content-Type: "'text/html'"
            ResponseTemplates:
              text/html: !Sub |-
                <html><body>$input.path('$.message')<script>$input.path('$.script')</script></body></html>
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Content-Type: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  UnsubscribeApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "SubscribersApiResource"
      PathPart: "unsubscribe"
  UnsubscribeApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "UnsubscribeApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      RequestParameters:
        method.request.querystring.username: false
        method.request.querystring.token: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "UnsubscribeLambdaFunction"
                - "Arn"
        RequestTemplates:
          application/json: !Sub |-
            {
              "username":"$input.params('username')",
              "token":"$input.params('token')"
            }
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Content-Type: "'text/html'"
            ResponseTemplates:
              text/html: !Sub |-
                <html><body>$input.path('$.message')<script>$input.path('$.script')</script></body></html>
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Content-Type: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  V0ApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "RootApiResource"
      PathPart: "v0"
  V0ComponentsApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "V0ApiResource"
      PathPart: "components"
  V0ComponentApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "V0ComponentsApiResource"
      PathPart: "{componentid}"
  V0GetComponentsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "V0ComponentsApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetComponentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
          - StatusCode: "400"
            SelectionPattern: ".*Error.*"
            ResponseTemplates:
              application/json: !Sub |-
                { "errors": [ { "message": "$input.path('$.errorMessage')" } ] }
      MethodResponses:
        - StatusCode: "200"
        - StatusCode: "400"
  V0PostComponentsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "V0ComponentsApiResource"
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PostComponentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
          - StatusCode: "400"
            SelectionPattern: ".*Error.*"
            ResponseTemplates:
              application/json: !Sub |-
                { "errors": [ { "message": "$input.path('$.errorMessage')" } ] }
      MethodResponses:
        - StatusCode: "200"
        - StatusCode: "400"
  V0PatchComponentApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "V0ComponentApiResource"
      HttpMethod: "PATCH"
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "body":$input.json('$'),
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PatchComponentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
          - StatusCode: "400"
            SelectionPattern: ".*Error.*"
            ResponseTemplates:
              application/json: !Sub |-
                { "errors": [ { "message": "$input.path('$.errorMessage')" } ] }
      MethodResponses:
        - StatusCode: "200"
        - StatusCode: "400"
  V0DeleteComponentApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "V0ComponentApiResource"
      HttpMethod: "DELETE"
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "DeleteComponentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "204"
          - StatusCode: "400"
            SelectionPattern: ".*Error.*"
            ResponseTemplates:
              application/json: !Sub |-
                { "errors": [ { "message": "$input.path('$.errorMessage')" } ] }
      MethodResponses:
        - StatusCode: "204"
        - StatusCode: "400"
  V0IncidentsApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "V0ApiResource"
      PathPart: "incidents"
  V0IncidentApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "V0IncidentsApiResource"
      PathPart: "{incidentid}"
  V0GetIncidentsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "V0IncidentsApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetIncidentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
          - StatusCode: "400"
            SelectionPattern: ".*Error.*"
            ResponseTemplates:
              application/json: !Sub |-
                { "errors": [ { "message": "$input.path('$.errorMessage')" } ] }
      MethodResponses:
        - StatusCode: "200"
        - StatusCode: "400"
  V0PostIncidentsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "V0IncidentsApiResource"
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PostIncidentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
          - StatusCode: "400"
            SelectionPattern: ".*Error.*"
            ResponseTemplates:
              application/json: !Sub |-
                { "errors": [ { "message": "$input.path('$.errorMessage')" } ] }
      MethodResponses:
        - StatusCode: "200"
        - StatusCode: "400"
  V0GetIncidentApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "V0IncidentApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetIncidentLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
          - StatusCode: "400"
            SelectionPattern: ".*Error.*"
            ResponseTemplates:
              application/json: !Sub |-
                { "errors": [ { "message": "$input.path('$.errorMessage')" } ] }
      MethodResponses:
        - StatusCode: "200"
        - StatusCode: "400"
  V0PatchIncidentApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "V0IncidentApiResource"
      HttpMethod: "PATCH"
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "body":$input.json('$'),
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PatchIncidentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
          - StatusCode: "400"
            SelectionPattern: ".*Error.*"
            ResponseTemplates:
              application/json: !Sub |-
                { "errors": [ { "message": "$input.path('$.errorMessage')" } ] }
      MethodResponses:
        - StatusCode: "200"
        - StatusCode: "400"
  V0DeleteIncidentApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "V0IncidentApiResource"
      HttpMethod: "DELETE"
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "DeleteIncidentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "204"
          - StatusCode: "400"
            SelectionPattern: ".*Error.*"
            ResponseTemplates:
              application/json: !Sub |-
                { "errors": [ { "message": "$input.path('$.errorMessage')" } ] }
      MethodResponses:
        - StatusCode: "204"
        - StatusCode: "400"
  V0MaintenancesApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "V0ApiResource"
      PathPart: "maintenances"
  V0MaintenanceApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "V0MaintenancesApiResource"
      PathPart: "{maintenanceid}"
  V0GetMaintenancesApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "V0MaintenancesApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetMaintenancesLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
          - StatusCode: "400"
            SelectionPattern: ".*Error.*"
            ResponseTemplates:
              application/json: !Sub |-
                { "errors": [ { "message": "$input.path('$.errorMessage')" } ] }
      MethodResponses:
        - StatusCode: "200"
        - StatusCode: "400"
  V0PostMaintenancesApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "V0MaintenancesApiResource"
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PostMaintenancesLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
          - StatusCode: "400"
            SelectionPattern: ".*Error.*"
            ResponseTemplates:
              application/json: !Sub |-
                { "errors": [ { "message": "$input.path('$.errorMessage')" } ] }
      MethodResponses:
        - StatusCode: "200"
        - StatusCode: "400"
  V0GetMaintenanceApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "V0MaintenanceApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetMaintenanceLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
          - StatusCode: "400"
            SelectionPattern: ".*Error.*"
            ResponseTemplates:
              application/json: !Sub |-
                { "errors": [ { "message": "$input.path('$.errorMessage')" } ] }
      MethodResponses:
        - StatusCode: "200"
        - StatusCode: "400"
  V0PatchMaintenanceApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "V0MaintenanceApiResource"
      HttpMethod: "PATCH"
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "body":$input.json('$'),
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PatchMaintenancesLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
          - StatusCode: "400"
            SelectionPattern: ".*Error.*"
            ResponseTemplates:
              application/json: !Sub |-
                { "errors": [ { "message": "$input.path('$.errorMessage')" } ] }
      MethodResponses:
        - StatusCode: "200"
        - StatusCode: "400"
  V0DeleteMaintenanceApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "V0MaintenanceApiResource"
      HttpMethod: "DELETE"
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "DeleteMaintenancesLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "204"
          - StatusCode: "400"
            SelectionPattern: ".*Error.*"
            ResponseTemplates:
              application/json: !Sub |-
                { "errors": [ { "message": "$input.path('$.errorMessage')" } ] }
      MethodResponses:
        - StatusCode: "204"
        - StatusCode: "400"
  V0MetricsApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "V0ApiResource"
      PathPart: "metrics"
  V0MetricsDataApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "V0MetricsApiResource"
      PathPart: "data"
  PostMetricsDataApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "V0MetricsDataApiResource"
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PostMetricsDataLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
            ResponseTemplates:
              application/json: !Sub |-
                #set ($errorsObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "errors": [
                    #foreach($errorObj in $errorsObj)
                    {
                      #foreach($key in $errorObj.keySet())
                      "$key": "$errorObj.get($key)"
                      #end
                    }
                    #end
                  ]
                }
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  UsagePlan:
    Type: "AWS::ApiGateway::UsagePlan"
    Properties:
      ApiStages:
        - ApiId: !Sub |-
            ${RestApi}
          Stage: prod
      UsagePlanName: !Sub |-
        ${AWS::StackName}
      Throttle:
        BurstLimit: 10
        RateLimit: 10
    DependsOn:
      - ApiDeployment
  StatusPageS3:
    Type: "AWS::S3::Bucket"
  StatusPageS3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref StatusPageS3
      PolicyDocument:
        Statement:
          - Sid: "AllowCloudFrontAccessIdentity"
            Effect: "Allow"
            Action:
              - "s3:GetObject"
            Resource: !Sub |-
              arn:aws:s3:::${StatusPageS3}/*
            Principal:
              AWS: !Sub |-
                arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontAccessIdentity}
  StatusPageDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Origins:
          - DomainName:
              !Select [ 2, !Split [ /, !GetAtt StatusPageS3.WebsiteURL ] ]
            Id:
              Ref: "StatusPageS3"
            CustomOriginConfig:
              OriginProtocolPolicy: "http-only"
          - DomainName: !Sub |-
              ${RestApi}.execute-api.${AWS::Region}.amazonaws.com
            OriginPath: "/prod"
            Id: !Sub |-
              ${RestApi}-${AWS::Region}
            CustomOriginConfig:
              OriginProtocolPolicy: "https-only"
              OriginSSLProtocols:
                - TLSv1
                - TLSv1.1
                - TLSv1.2
        Aliases:
          !If
          - UseDefaultStatusPageURL
          - !Ref AWS::NoValue
          - !Ref StatusPageURL
        Enabled: "true"
        HttpVersion: "http2"
        Comment: "Distribution for status page of LambStatus"
        ViewerCertificate:
          !If
            - UseDefaultStatusPageSSLCertificate
            - !Ref AWS::NoValue
            - MinimumProtocolVersion: TLSv1
              SslSupportMethod: sni-only
              AcmCertificateArn:
                !Ref StatusPageSSLCertificate
        DefaultRootObject: "index.html"
        DefaultCacheBehavior:
          DefaultTTL: 0
          TargetOriginId:
            Ref: "StatusPageS3"
          ForwardedValues:
            QueryString: "false"
            Cookies:
              Forward: "none"
            Headers:
              - "Origin"
          ViewerProtocolPolicy: "redirect-to-https"
          Compress: "true"
        CacheBehaviors:
          - PathPattern: "api/*"
            TargetOriginId: !Sub |-
              ${RestApi}-${AWS::Region}
            ForwardedValues:
              QueryString: "true"
              Cookies:
                Forward: "none"
              Headers:
                - "Origin"
                - "Authorization"
                - "Content-Type"
            ViewerProtocolPolicy: "redirect-to-https"
            AllowedMethods:
              - "DELETE"
              - "GET"
              - "HEAD"
              - "OPTIONS"
              - "PATCH"
              - "POST"
              - "PUT"
            Compress: "true"
            DefaultTTL: "10"
        PriceClass: "PriceClass_200"
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: "/index.html"
          - ErrorCachingMinTTL: 0
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: "/index.html"
  AdminPageS3:
    Type: "AWS::S3::Bucket"
  AdminPageS3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref AdminPageS3
      PolicyDocument:
        Statement:
          - Sid: "AllowCloudFrontAccessIdentity"
            Effect: "Allow"
            Action:
              - "s3:GetObject"
            Resource: !Sub |-
              arn:aws:s3:::${AdminPageS3}/*
            Principal:
              AWS: !Sub |-
                arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontAccessIdentity}
  AdminPageDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Origins:
          - DomainName:
              !Select [ 2, !Split [ /, !GetAtt AdminPageS3.WebsiteURL ] ]
            Id:
              Ref: "AdminPageS3"
            CustomOriginConfig:
              OriginProtocolPolicy: "http-only"
          - DomainName: !Sub |-
              ${RestApi}.execute-api.${AWS::Region}.amazonaws.com
            OriginPath: "/prod"
            Id: !Sub |-
              ${RestApi}-${AWS::Region}
            CustomOriginConfig:
              OriginProtocolPolicy: "https-only"
              OriginSSLProtocols:
                - TLSv1
                - TLSv1.1
                - TLSv1.2
        Aliases:
          !If
          - UseDefaultAdminPageURL
          - !Ref AWS::NoValue
          - !Ref AdminPageURL
        Enabled: "true"
        HttpVersion: "http2"
        Comment: "Distribution for admin page of LambStatus"
        ViewerCertificate:
          !If
            - UseDefaultAdminPageSSLCertificate
            - !Ref AWS::NoValue
            - SslSupportMethod: sni-only
              AcmCertificateArn:
                !Ref AdminPageSSLCertificate
        DefaultRootObject: "index.html"
        DefaultCacheBehavior:
          DefaultTTL: 0
          TargetOriginId:
            Ref: "AdminPageS3"
          ForwardedValues:
            QueryString: "false"
            Cookies:
              Forward: "none"
          ViewerProtocolPolicy: "redirect-to-https"
          Compress: "true"
        CacheBehaviors:
          - PathPattern: "api/*"
            TargetOriginId: !Sub |-
              ${RestApi}-${AWS::Region}
            ForwardedValues:
              QueryString: "true"
              Cookies:
                Forward: "none"
              Headers:
                - "Origin"
                - "Authorization"
                - "Content-Type"
            ViewerProtocolPolicy: "redirect-to-https"
            AllowedMethods:
              - "DELETE"
              - "GET"
              - "HEAD"
              - "OPTIONS"
              - "PATCH"
              - "POST"
              - "PUT"
            Compress: "true"
            DefaultTTL: "0"
        PriceClass: "PriceClass_200"
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: "/index.html"
          - ErrorCachingMinTTL: 0
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: "/index.html"
  ServiceComponentTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      # The prefix of table name must be stack name
      TableName: !Sub |-
        ${AWS::StackName}-ServiceComponentTable
      AttributeDefinitions:
        - AttributeName: "componentID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "componentID"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
  IncidentTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      # The prefix of table name must be stack name
      TableName: !Sub |-
        ${AWS::StackName}-IncidentTable
      AttributeDefinitions:
        - AttributeName: "incidentID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "incidentID"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
  IncidentUpdateTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      # The prefix of table name must be stack name
      TableName: !Sub |-
        ${AWS::StackName}-IncidentUpdateTable
      AttributeDefinitions:
        - AttributeName: "incidentID"
          AttributeType: "S"
        - AttributeName: "incidentUpdateID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "incidentID"
          KeyType: "HASH"
        - AttributeName: "incidentUpdateID"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
  MaintenanceTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      # The prefix of table name must be stack name
      TableName: !Sub |-
        ${AWS::StackName}-MaintenanceTable
      AttributeDefinitions:
        - AttributeName: "maintenanceID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "maintenanceID"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
  MaintenanceUpdateTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      # The prefix of table name must be stack name
      TableName: !Sub |-
        ${AWS::StackName}-MaintenanceUpdateTable
      AttributeDefinitions:
        - AttributeName: "maintenanceID"
          AttributeType: "S"
        - AttributeName: "maintenanceUpdateID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "maintenanceID"
          KeyType: "HASH"
        - AttributeName: "maintenanceUpdateID"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
  MetricsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      # The prefix of table name must be stack name
      TableName: !Sub |-
        ${AWS::StackName}-MetricsTable
      AttributeDefinitions:
        - AttributeName: "metricID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "metricID"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
  SettingsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      # The prefix of table name must be stack name
      TableName: !Sub |-
        ${AWS::StackName}-SettingsTable
      AttributeDefinitions:
        - AttributeName: "key"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "key"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
  S3PutObjectFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/S3PutObject.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: Put an object into S3.
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-S3PutObject
      Handler: "index.handle"
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: nodejs8.10
      Timeout: 30
  S3SyncObjectsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/S3SyncObjects.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: Sync S3 objects.
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-S3SyncObjects
      Handler: "index.handle"
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: nodejs8.10
      Timeout: 30
  CognitoCreateUserPoolFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/CognitoCreateUserPool.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: Create a user pool.
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-CognitoCreateUserPool
      Handler: "index.handle"
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: nodejs8.10
      Timeout: 30
  CognitoCreateUserPoolClientFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/CognitoCreateUserPoolClient.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: Create a user pool client.
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-CognitoCreateUserPoolClient
      Handler: "index.handle"
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: nodejs8.10
      Timeout: 30
  CognitoCreateUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/CognitoCreateUser.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: Create a user.
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-CognitoCreateUser
      Handler: "index.handle"
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: nodejs8.10
      Timeout: 30
  APIGatewayDeployFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/APIGatewayDeploy.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: Deploy the APIGateway.
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-APIGatewayDeploy
      Handler: "index.handle"
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: nodejs8.10
      Timeout: 30
  DBCreateItemsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/DBCreateItems.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Create items"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-DBCreateItems
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: "nodejs8.10"
      Timeout: 30
  GenerateVerificationMessageFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/GenerateVerificationMessage.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "generate a verification message"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-GenerateVerificationMessage
      Handler: "index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: "nodejs8.10"
      Timeout: 30
  GenerateVerificationMessagePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "GenerateVerificationMessageFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "cognito-idp.amazonaws.com"
      SourceArn: !Sub |-
        ${SubscribersPool.Arn}
  StatusPageApiInfo:
    Type: Custom::S3PutObject
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - S3PutObjectFunction
          - Arn
      Region: !Sub |-
        ${AWS::Region}
      Bucket:
        Ref: StatusPageS3
      Key: settings.js
      Body: !Sub
        - __LAMBSTATUS_API_URL__ = 'https://${Domain}';
        - Domain: !If
          - UseDefaultStatusPageURL
          - !Sub ${StatusPageDistribution.DomainName}
          - !Select ["0", !Ref StatusPageURL]
      CacheControl: max-age=300
  AdminPageApiInfo:
    Type: Custom::S3PutObject
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - S3PutObjectFunction
          - Arn
      Region: !Sub |-
        ${AWS::Region}
      Bucket:
        Ref: AdminPageS3
      Key: settings.js
      Body: !Sub
        - __LAMBSTATUS_API_URL__ = 'https://${Domain}';__LAMBSTATUS_USER_POOL_ID__ = '${CognitoUserPool.UserPoolID}';__LAMBSTATUS_CLIENT_ID__ = '${CognitoUserPoolClient.UserPoolClientID}';
        - Domain: !If
          - UseDefaultAdminPageURL
          - !Sub ${AdminPageDistribution.DomainName}
          - !Select ["0", !Ref AdminPageURL]
      CacheControl: max-age=300
  DBInitialItems:
    Type: Custom::DBCreateItems
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - DBCreateItemsLambdaFunction
          - Arn
      IncidentNotificationTopic:
        Ref: "IncidentNotificationTopic"
      UsagePlanID:
        Ref: "UsagePlan"
  StatusPageFrontend:
    Type: Custom::S3SyncObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - S3SyncObjectsFunction
          - Arn
      SourceBucket: lambstatus
      SourceKey: !Sub
        - status-page/${Version}
        - Version:
            Fn::FindInMap: [ Constants, LambStatus, Version ]
      DestinationRegion: !Sub |-
        ${AWS::Region}
      DestinationBucket:
        Ref: StatusPageS3
  AdminPageFrontend:
    Type: Custom::S3SyncObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - S3SyncObjectsFunction
          - Arn
      SourceBucket: lambstatus
      SourceKey: !Sub
        - admin-page/${Version}
        - Version:
            Fn::FindInMap: [ Constants, LambStatus, Version ]
      DestinationRegion: !Sub |-
        ${AWS::Region}
      DestinationBucket:
        Ref: AdminPageS3
  CognitoSMSCallerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cognito-idp.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SNSPublish
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sns:publish
                Resource: '*'
  CognitoUserPool:
    Type: Custom::CognitoUserPool
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CognitoCreateUserPoolFunction
          - Arn
      PoolName: !Sub |-
        ${AWS::StackName}
      AdminPageURL: !Sub
        - https://${Domain}
        - Domain: !If
          - UseDefaultAdminPageURL
          - !Sub ${AdminPageDistribution.DomainName}
          - !Select ["0", !Ref AdminPageURL]
      SnsCallerArn: !Sub |-
        ${CognitoSMSCallerRole.Arn}
  CognitoUserPoolClient:
    Type: Custom::CognitoUserPoolClient
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CognitoCreateUserPoolClientFunction
          - Arn
      ClientName: Browser
      UserPoolID: !Sub |-
        ${CognitoUserPool.UserPoolID}
  CognitoInitialUser:
    Type: Custom::CognitoInitialUser
    Properties:
      ServiceToken: !Sub |-
        ${CognitoCreateUserFunction.Arn}
      UserPoolID: !Sub |-
        ${CognitoUserPool.UserPoolID}
      Email: !Sub |-
        ${UserEmail}
      UserName: !Sub |-
        ${UserName}
  SubscribersPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AliasAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      EmailVerificationSubject: "Your verification link"
      LambdaConfig:
        CustomMessage: !Sub |-
          ${GenerateVerificationMessageFunction.Arn}
      MfaConfiguration: "OFF"
      Policies:
        PasswordPolicy:
          MinimumLength: 32
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      UserPoolName: !Sub |-
        ${AWS::StackName}-Subscribers
      Schema:
        - AttributeDataType: String
          Name: token
          StringAttributeConstraints:
            MaxLength: "64"
            MinLength: "64"
          Mutable: true
  SubscribersPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: server
      UserPoolId:
        Ref: SubscribersPool
  APIGatewayDeploy:
    Type: Custom::APIGatewayDeploy
    Properties:
      ServiceToken: !Sub |-
        ${APIGatewayDeployFunction.Arn}
      RestApiId: !Sub |-
        ${RestApi}
      StageName: prod
      # this custom resource is updated when this parameter is changed.
      Version: !Sub
        - ${Version}
        - Version:
            Fn::FindInMap: [ Constants, LambStatus, Version ]
    DependsOn:
      - ApiDeployment
Outputs:
  LambdaRoleArn:
    Value:
      !GetAtt LambdaRole.Arn
  AdminPageS3BucketURL:
    Value:
      Fn::GetAtt:
        - "AdminPageS3"
        - "WebsiteURL"
    Description: "URL of S3 bucket for hosting admin page"
  AdminPageS3BucketName:
    Value:
      Ref: "AdminPageS3"
  AdminPageCloudFrontURL:
    Value: !Sub
      - https://${Domain}
      - Domain: !If
        - UseDefaultAdminPageURL
        - !Sub ${AdminPageDistribution.DomainName}
        - !Select ["0", !Ref AdminPageURL]
  StatusPageS3BucketURL:
    Value:
      Fn::GetAtt:
        - "StatusPageS3"
        - "WebsiteURL"
    Description: "URL of S3 bucket for hosting status page"
  StatusPageS3BucketName:
    Value:
      Ref: "StatusPageS3"
  StatusPageCloudFrontURL:
    Value: !Sub
      - https://${Domain}
      - Domain: !If
        - UseDefaultStatusPageURL
        - !Sub ${StatusPageDistribution.DomainName}
        - !Select ["0", !Ref StatusPageURL]
  InvocationURL:
    Value: !Sub |-
      https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/
  UserPoolID:
    Value: !Sub |-
      ${CognitoUserPool.UserPoolID}
  UserPoolClientID:
    Value: !Sub |-
      ${CognitoUserPoolClient.UserPoolClientID}
  SubscribersPoolID:
    Value:
      Ref: SubscribersPool
  SubscribersPoolClientID:
    Value:
      Ref: SubscribersPoolClient
  Version:
    Value:
      Fn::FindInMap: [ Constants, LambStatus, Version ]
  IncidentNotificationTopic:
    Value:
      Ref: "IncidentNotificationTopic"
  UsagePlanID:
    Value:
      Ref: "UsagePlan"
  BouncesAndComplaintsHandlerArn:
    Value:
      !GetAtt HandleBouncesAndComplaintsLambdaFunction.Arn
